



Global Const Pi = 3.14159265358979

Option Explicit     'Requirs that all variables to be declared explicitly.
Option Compare Text 'Uppercase letters to be equivalent to lowercase letters.

Option Base 1       'The "Option Base" statment alowws to specify 0 or 1 as the
                    'default first index of arrays.
                    



'// The normal distribution function
Public Function ND(X As Double) As Double
    ND = 1 / Sqr(2 * Pi) * Exp(-X ^ 2 / 2)
End Function


'// The cumulative normal distribution function
Public Function CND(X As Double) As Double
    
    Dim L As Double, K As Double
    Const a1 = 0.31938153:  Const a2 = -0.356563782: Const a3 = 1.781477937:
    Const a4 = -1.821255978:  Const a5 = 1.330274429
    
    L = Abs(X)
    K = 1 / (1 + 0.2316419 * L)
    CND = 1 - 1 / Sqr(2 * Pi) * Exp(-L ^ 2 / 2) * (a1 * K + a2 * K ^ 2 + a3 * K ^ 3 + a4 * K ^ 4 + a5 * K ^ 5)
    
    If X < 0 Then
        CND = 1 - CND
    End If
End Function



'// Black (1977) Options on futures/forwards
Public Function Black76(CallPutFlag As String, F As Double, X _
                As Double, T As Double, r As Double, v As Double) As Double
                
    Dim d1 As Double, d2 As Double
    
    d1 = (Log(F / X) + (v ^ 2 / 2) * T) / (v * Sqr(T))
    d2 = d1 - v * Sqr(T)
    If CallPutFlag = "c" Then
        Black76 = Exp(-r * T) * (F * CND(d1) - X * CND(d2))
    ElseIf CallPutFlag = "p" Then
        Black76 = Exp(-r * T) * (X * CND(-d2) - F * CND(-d1))
    End If
End Function


Function dOne(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    dOne = (Log(S / X) + (r - d + 0.5 * v ^ 2) * T) / (v * (Sqr(T)))
End Function

Function NdOne(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    NdOne = Exp(-(dOne(S, X, T, r, v, d) ^ 2) / 2) / (Sqr(2 * Application.WorksheetFunction.Pi()))
End Function

Function dTwo(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    dTwo = dOne(S, X, T, r, v, d) - v * Sqr(T)
End Function

Function NdTwo(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    NdTwo = Application.NormSDist(dTwo(S, X, T, r, v, d))
End Function

Function OptionPrice(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    If OptionType = "C" Then
        OptionPrice = Exp(-d * T) * S * Application.NormSDist(dOne(S, X, T, r, v, d)) - X * Exp(-r * T) * Application.NormSDist(dOne(S, X, T, r, v, d) - v * Sqr(T))
    ElseIf OptionType = "P" Then
        OptionPrice = X * Exp(-r * T) * Application.NormSDist(-dTwo(S, X, T, r, v, d)) - Exp(-d * T) * S * Application.NormSDist(-dOne(S, X, T, r, v, d))
    End If
End Function

Function OptionDelta(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    If OptionType = "C" Then
        OptionDelta = Application.NormSDist(dOne(S, X, T, r, v, d))
    ElseIf OptionType = "P" Then
        OptionDelta = Application.NormSDist(dOne(S, X, T, r, v, d)) - 1
    End If
End Function

Function OptionTheta(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    If OptionType = "C" Then
        OptionTheta = -((S * v * NdOne(S, X, T, r, v, d)) / (2 * Sqr(T)) - r * X * Exp(-r * (T)) * NdTwo(S, X, T, r, v, d)) / 365
    ElseIf OptionType = "P" Then
        OptionTheta = -((S * v * NdOne(S, X, T, r, v, d)) / (2 * Sqr(T)) + r * X * Exp(-r * (T)) * (1 - NdTwo(S, X, T, r, v, d))) / 365
    End If
End Function

Function Gamma(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    Gamma = NdOne(S, X, T, r, v, d) / (S * (v * Sqr(T)))
End Function

Function Vega(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    Vega = 0.01 * S * Sqr(T) * NdOne(S, X, T, r, v, d)
End Function

Function OptionRho(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    If OptionType = "C" Then
        OptionRho = 0.01 * X * T * Exp(-r * T) * Application.NormSDist(dTwo(S, X, T, r, v, d))
    ElseIf OptionType = "P" Then
        OptionRho = -0.01 * X * T * Exp(-r * T) * (1 - Application.NormSDist(dTwo(S, X, T, r, v, d)))
    End If
End Function



'// Normal Model Options on futures/forwards

Public Function NormFutOpt(CallPutFlag As String, F As Double, X As Double, T As Double, r As Double, u As Double) As Double
    Dim v As Double
    v = u * Sqr(T)
    If CallPutFlag = "c" Then
         NormFutOpt = Exp(-r * T) * ((v * Exp((-(F - X) ^ 2) / (2 * v * v))) / Sqr(2 * Pi) + (F - X) * CND((F - X) / v))
        
        
        ElseIf CallPutFlag = "p" Then
         NormFutOpt = Exp(-r * T) * ((v * Exp((-(F - X) ^ 2) / (2 * v * v))) / Sqr(2 * Pi) + (X - F) * CND((X - F) / v))
    End If
End Function









Function OptionPrice(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    dOne = (Log(S / X) + (r - d + 0.5 * v ^ 2) * T) / (v * (Sqr(T)))
    NdOne = Exp(-(dOne(S, X, T, r, v, d) ^ 2) / 2) / (Sqr(2 * 
    dTwo = dOne(S, X, T, r, v, d) - v * Sqr(T)
    NdTwo = Application.NormSDist(dTwo(S, X, T, r, v, d))
    If OptionType = "C" Then
        OptionPrice = Exp(-d * T) * S * Application.NormSDist(dOne(S, X, T, r, v, d)) - X * Exp(-r * T) * Application.NormSDist(dOne(S, X, T, r, v, d) - v * Sqr(T))
    ElseIf OptionType = "P" Then
        OptionPrice = X * Exp(-r * T) * Application.NormSDist(-dTwo(S, X, T, r, v, d)) - Exp(-d * T) * S * Application.NormSDist(-dOne(S, X, T, r, v, d))
    End If
End Function

Function OptionDelta(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    If OptionType = "C" Then
        OptionDelta = Application.NormSDist(dOne(S, X, T, r, v, d))
    ElseIf OptionType = "P" Then
        OptionDelta = Application.NormSDist(dOne(S, X, T, r, v, d)) - 1
    End If
End Function

Function OptionTheta(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    dOne = (Log(S / X) + (r - d + 0.5 * v ^ 2) * T) / (v * (Sqr(T)))
    NdOne = Exp(-(dOne(S, X, T, r, v, d) ^ 2) / 2) / (Sqr(2 * 
    dTwo = dOne(S, X, T, r, v, d) - v * Sqr(T)
    NdTwo = Application.NormSDist(dTwo(S, X, T, r, v, d))
    If OptionType = "C" Then
        OptionTheta = -((S * v * NdOne(S, X, T, r, v, d)) / (2 * Sqr(T)) - r * X * Exp(-r * (T)) * NdTwo(S, X, T, r, v, d)) / 365
    ElseIf OptionType = "P" Then
        OptionTheta = -((S * v * NdOne(S, X, T, r, v, d)) / (2 * Sqr(T)) + r * X * Exp(-r * (T)) * (1 - NdTwo(S, X, T, r, v, d))) / 365
    End If
End Function

Function Gamma(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    Gamma = NdOne(S, X, T, r, v, d) / (S * (v * Sqr(T)))
End Function

Function Vega(S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    Vega = 0.01 * S * Sqr(T) * NdOne(S, X, T, r, v, d)
End Function

Function OptionRho(OptionType As String, S As Double, X As Double, T As Double, r As Double, v As Double, d As Double) As Double
    If OptionType = "C" Then
        OptionRho = 0.01 * X * T * Exp(-r * T) * Application.NormSDist(dTwo(S, X, T, r, v, d))
    ElseIf OptionType = "P" Then
        OptionRho = -0.01 * X * T * Exp(-r * T) * (1 - Application.NormSDist(dTwo(S, X, T, r, v, d)))
    End If
End Function




